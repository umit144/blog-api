openapi: 3.1.0
info:
  title: Blog API
  version: 1.0.0
  description: API for a blog application with authentication, posts, categories, and file management

servers:
  - url: http://api.example.com/v1

paths:
  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed

  /auth/register:
    post:
      summary: User registration
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input

  /auth/session:
    get:
      summary: Get current user session
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /auth/google/login:
    get:
      summary: Initiate Google OAuth login
      tags:
        - Authentication
      responses:
        '307':
          description: Redirect to Google OAuth

  /auth/google/callback:
    post:
      summary: Google OAuth callback
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
      responses:
        '200':
          description: Successful OAuth login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed

  /auth/logout:
    get:
      summary: User logout
      tags:
        - Authentication
      responses:
        '200':
          description: Logged out successfully

  /users:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /posts:
    get:
      summary: Get all posts
      tags:
        - Posts
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalCount:
                        type: integer
                      totalPages:
                        type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      tags:
        - Posts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input

  /posts/{slugOrId}:
    get:
      summary: Get post by slug or ID
      tags:
        - Posts
      parameters:
        - in: path
          name: slugOrId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found

  /posts/{id}:
    put:
      summary: Update a post
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
        '404':
          description: Post not found
    delete:
      summary: Delete a post
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Post deleted successfully
        '404':
          description: Post not found

  /posts/{postId}/categories/{categoryId}:
    post:
      summary: Assign category to post
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Category assigned successfully
    delete:
      summary: Unassign category from post
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Category unassigned successfully

  /posts/{postId}/categories:
    get:
      summary: Get categories for a post
      tags:
        - Posts
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of categories for the post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    put:
      summary: Update categories for a post
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Categories updated successfully

  /categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a new category
      tags:
        - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input

  /categories/{slugOrId}:
    get:
      summary: Get category by slug or ID
      tags:
        - Categories
      parameters:
        - in: path
          name: slugOrId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found

  /categories/{id}:
    put:
      summary: Update a category
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input
        '404':
          description: Category not found
    delete:
      summary: Delete a category
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found

  /files:
    post:
      summary: Upload a file
      tags:
        - Files
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  filename:
                    type: string
        '400':
          description: File upload failed

  /files/{filename}:
    delete:
      summary: Delete a file
      tags:
        - Files
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File deleted successfully
        '400':
          description: Filename is required
        '500':
          description: Failed to delete file

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
        profilePicture:
          type: string
    Post:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        slug:
          type: string
        author:
          $ref: '#/components/schemas/User'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    Category:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        slug:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer